
# untuk commmit ke github dari PC rumah, simpan file yang telah diubah, masuk ke terminal
# ketik git status, lalu git commit -am "bla-bla", setelah itu git push untuk update perubahan

# materi ke 1-3, setup editor ATOM dan download tools yang dibutuhkan
download git dan install dulu,
download dan install atom editor
donwload dan install Go, PROGRAM
atom : tekan ctrl + , untuk install paket go-plus, platformio-ide-terminal, git clone, git plus, go plus, terminal

go env : yang perlu di perhatikan adalah bagian dari GOPATH dan GOROOT(SDK)
GOPATH: tempat penyimpanan proyek/kerjaan kamu
GOROOT: goolang source codes

# config pada linux
vim ~/.bash_profile

# for GO programing, sesuaikan dimana gopath sebagai tempat kita membuat projek
export GOROOT="/usr/local/go"
export GOPATH="$HOME/Documents/go"
export PATH= "$HOME/Documents/go/bin:$PATH"

#materi, hello word untuk skrip berikutnya penjelasan akan di masukan pada skrip terkait.
1. hello word, 1.go

package main
// Setiap file pergi dimulai dengan nama paket. Nama paketnya harus sama dengan nama folder
// kecuali package main , package main adalah entry point untuk program anda.

import "fmt"
// Jika Anda menggunakan kode dari paket lain, Anda akan mencantumkan paket yang ingin Anda impor.
// Ini memungkinkan Anda untuk menggunakan kode dalam program Anda yang telah ditulis orang lain. Paket juga kadang disebut sebagai library.

// Paket "fmt" sedang diimpor.

func main()  {
    fmt.Println("Hello World!")
  }
// Kode dari paket "fmt" sedang digunakan .Println adalah fungsi yang dideklarasikan dalam paket "fmt".
// Agar fungsinya dapat diakses ke paket lain, maka harus diberi KAPITALISASI. Ini sama dengan "publik" dalam bahasa lain.

// Func main () adalah entry point untuk program anda; Kode pertama yang akan dijalankan Paket utama juga bisa memiliki fungsi lain selain func main ().

// Ekspresi menentukan perhitungan nilai dengan menerapkan operator dan fungsi ke operan.

// "Hello World!", Parameter adalah variabel yang merupakan bagian dari tanda tangan func (func declaration).
// Argumen adalah ungkapan yang digunakan saat memanggil func. Sumber: dimodifikasi dari stackoverflow

2. klik dibagian bawah ada terminal/konsole dari plugin atom yang kita install, lalu  ketik

C:\Users\adpit\github> go run .\1.go
Hello World

3. sedangkan perintah "go build" untuk membuat file 1.go menjadi binarry, ini yang dinamakan atas folder utama dimana skrip berada
compile pada unix,  dengan perintah "go install" setelah itu masukan hasil complinya ke /bin, sehingga aplikasi bisa langsung di pangil "hello"

# materi ke 4 , go get

// create repository, buat gitbaru dan clone ke pc
https://github.com/new
	Repository name: latihangolang
	Public
	Initialize this repository with a README
	add .gitignore:Go

// pada repository baru klik tombol download/clone nanti dapat url seperti ini:
(ssh)git@github.com:adpit/latihangolang.git # gak bisa masalah restric ganti jadi
(https)https://github.com/adpit/latihangolang.git

// lihat ini untuk clone pada atom editor: ctrl+shift+p
file:///C:/Users/adpit/Desktop/data/atom-x64-windows/2.gif

// pada editor atom tekan : ctrl+shift+p
lalu ketik 			   : git clone
masukan urlnya		   : https://github.com/adpit/latihangolang

// hasilnya terbentuk project yang di clone, untuk diperhatikan sebuah file dengan nama .gitignore

.gitignore  adalah file untuk projecy go, karena tadi kita pilih go diatas. file ini .gitignore memberitahukan pada git / github tidak metrack file yang ada dalam list

// cara commit mengunakan editor atom sebelumnya tambahkan/install dulu package git-plus jika belum ada
file:///C:/Users/adpit/Desktop/data/atom-x64-windows/3.gif

lalu ketik -> cmd
# git config --global user.name "arieibra rumah"
# git config --global user.email adpit31@gmail.com
// tambahan untuk linux setting github : Permanently authenticating with Git repositories,
Run following command to enable credential caching:
# git config credential.helper store
# git push https://github.com/adpit/latihangolang

Use should also specify caching expire: git config --global credential.helper 'cache --timeout 7200'
ref: https://stackoverflow.com/questions/8588768/git-push-username-password-how-to-avoid

// coba edit sebuah file pada project yang kita clone tadi lalu simpan(ini penting!), ctrl + shift + p "add plus".
tekan ctrl+shift+p "commit plus", tulisakan keterangan updatenya., jangan lupa ctrl+s untuk simpan
tekan ctrl+shift+p "push plus", jika step ini berhasil cek pada
https://github.com/adpit/latihangolang/commits/master
(bisa juga commit pada window git+ pada terminal atom)

// jadi caranya untuk edit dan simpan ke github adalah (push kita upload) sebelumnya gunakan git pull untuk download agar tidak konflik
1.editfile(simpan)
2.git add coba ganti dengan git writem, git add jika file baru dibuat
3.git commit(beri penjelasan simpan)
4.git push (nanti dimita user dan password jika belum)

// add paket pada atom editor, git clone
file:///C:/Users/adpit/Desktop/data/atom-x64-windows/add-paket-atom.gif

# REVIEW
git log -> pada terminal atom untuk melihat log dari commit yang kita kirim ke github
go get -> sama seperti clone git clone repository ke komputer kita (error belm tau kenapa di windows)
godoc.org gudang package contoh : https://godoc.org/fmt

## materi ke 5, Packages && Docs
Packages dapat dikatakan sebagai sebuah nama lain dari folder, sebuah folder didalamnya berisi folder dan file, jadi
Packages dapat beriskan lebih banyak Packages dan file
Packages memiliki nama yang unik, pathnya setelah folder src.
lihat pada sumber go atau SDK atau ROOTPATH (C:\Go\src) untuk memastikan bagaimana Packages diatur.

// C:\Go\src\archive\net\http" sebagai contoh ada bnyak folder dan file didalamnya, ingat Packages hanya nama lain dari folder, Packages = folder

// godoc.org dokumentasi untuk bahasa pemograman GO harap ingat url berhububgan dengan Packages yang didokumentasikan
// sedangkan godoc.org/net/http nanti akan ada penjelasan untuk fungsinya

// ingat!
godoc.org/net/http 			-> di url browser
import "net/http"  			-> pada isi skrip
C:\Go\src\archive\net\http 	-> hirakry SDK/ROOTPATH

# pertanyaan, pada path C:\Go\src\archive\net\http\cookiejar, url apa untuk mencarinya di godoc.org?
jawabanya, godoc.org/net/http/cookiejar
silakan explore path lain dan coba cari di godoc.org

// cara mengatur skrip kita,
-> go get github.com/goestoeleven/golangtraning
// pada path ROOTPATH
-> C:\Desktop\skrip\src\github\goestoeleven\jurasicmidi
// pada godoc.org
-> godoc.org/github/jurasicmidi/httprouter

# dokumentasi godoc.org vs golang.org vs godoc --help

// golang.org/pkg/net/http
* Go dokumentasi juga dapat ditemukan di golang.org
* golang.org hanya memliki dokumentasi dari sumber GO kamu tidak dapat temukan sumber github
* (REKOMEND)godoc.org memili semua dokumentasi Packages termasuk sorce GO dan juga github

// Packages nama dengan bentuk url pada golang.org:
https://golang.org/doc/code.html#PackageNames
https://golang.org/doc/effective_go.html#names

// mencari sebuah Packages atau Library di godoc.org
klik -> godoc.org/?q=uuid pilih yang ada RFCnya dengan banyak fitur

## materi ke 6, Mengunakan Library (aka gunakan skrip orang lain, aka gunakan code pada Packages lain)

// didalam lab1 ini kita akan membuat execude program pada lab/helloworld lalu mengunakan variabel diluar dari folder lab/helloworld
// yaitu pada folder lab/stringutil yang berfungsi sebagai library/package/ yang menjadi utility pengelolaan string dari lab/helloworld

// penamaan dan pengaturan, file dan Packages
definisi nama Packages harus sama dengan folder didalamnya
skrip_ditulis : package stringutil
nama_foldernya_fileberada : lab\stringutil

// sedangkan Packages Main hanya ada satu disetiap execude program yang kita buat
skrip_ditulis: "Packages Main"
pada folder helloword

// penamaan sebuah file nama disarankan jelas dan singka contoh : lab\stringutil\reverse.go

// dalam lab1 ini kita membuat folder name dengan nama lab1/stringutil yang digunakan sebagai package dari skrip kita nah kamu dapat membuat banyak file (fungsi-fungsi) lain dalam sebuah Package/folder di lab1/stringutil

# capitalization: Public(Capitalized), private(camelCase)
perbedaan keduanya adalah yang Capitalized sebagai fungsi public sedangkan
camelCase sebagai fungsi private yang hanya dapat digunakan didalam skrip package sendiri

// ingat untuk sebuah fungsi yang dapat digunakan diluar sebuah packet, nama fungsi "Reverse" mengunakan huruf besar di awal silakan lihat
nama_skrip: lab1/stringutil/reverse.go
skrip_ditulis_penjelasan_lengkapnya_dibuka_filenya:
func Reverse(s string) string { // Reverse adalah public fungsi
return reverseTwo(s) // reverseTwo adalah private fungsi jadi hanya tersedia didalam package

// coba kita jalankan skripnya mengunakan public fungsi pada hello.go
nama_skrip: lab1/helloworld/hello.go
skrip_ditulis_penjelasan_lengkapnya_dibuka_filenya:
fmt.Println(stringutil.Reverse("!oG ,olleH")) // go run hasilnya berhasil Hello, Go! (public fungsi)

// coba kita tambahkan untuk mengunakan private fungsi pada hello.go
nama_skrip: lab1/helloworld/hello.go
skrip_ditulis_penjelasan_lengkapnya_dibuka_filenya:
fmt.Println(stringutil.reverseTwo("!oG ,olleH")) // go run hasilnya error (private fungsi)
error:
.\hello.go:13: cannot refer to unexported name stringutil.reverseTwo
.\hello.go:13: undefined: stringutil.reverseTwo

// jadi perbedaan dari public dan private fungsi dari penulisanya capitalized dan camelCase.

// go fmt, format skrip jika kita ketik " go fmt" maka akan terlihat skrip kita sudah sesuai atau tidak formatnya
// tulis skrip sebelah kiri semua lalu ketik go fmt maka akan terformat seperti condong ke dalam 'kanan'

## materi ke 7, go build & go install (review)
// sebelumnya kita sudah membuat 2 package yaitu : lab1/helloworld dan lab1/stringutil
// kita juga sudah memperispakan 2 file yaitu: hello.go dan reverse.go

// ketik pada terminal di tempat lab1/stringutil
go build // won't produce an output file
go install // will place the package inside the pkg direcory of the workspace

// Path (go install ) + (go install )
----
C:\Users\adpit\go\src\github.com\adpit\latihangolang\lab1\stringutil

// Path file hasil dari (go install )
----
C:\Users\adpit\go\pkg\windows_amd64\github.com\adpit\latihangolang\lab1

# import

// cara import sebuah package yang ada dalam GOROOT pada src
nama_skrip: lab1/helloworld/hello.go
skrip_ditulis_penjelasan_lengkapnya_dibuka_filenya:
	"fmt"
	"github.com/adpit/latihangolang/lab1/stringutil"

// dan kemudian kita gunakan satu fungsi public  "stringutil.Reverse"
nama_skrip: lab1/helloworld/hello.go
skrip_ditulis_penjelasan_lengkapnya_dibuka_filenya:
	fmt.Println(stringutil.Reverse("!oG ,olleH")) // go run hasilnya berhasil Hello, Go! (public fungsi)


# review
go build, builds go code; if code is package main, it creates a binary executable and drops it in the package main’s folder;
if code is just a package, it builds it then throws away the binary.

go install, builds and installs go code; if code is package main, it creates a binary executable and drops it in the workspace’s bin folder;
if code is a package, it builds it then drops it in the pkg folder (a file with a .a extension)

import, import path is everything after the “src” folder in your workspace use the last folder in the import path to reference the package
in your code you can alias packages in your imports

# tugas
Search for uuid at godoc.org
use go get to get the code for nu7hatch/gouuid
open up finder
locate this code
take a screenshot of this
Create a file that imports this code
alias the package as just uuid
take a screenshot of this

## materi ke 7, go build & go install (review)
// sebelumnya kita sudah membuat 2 package yaitu : lab1/helloworld dan lab1/stringutil
// kita juga sudah memperispakan 2 file yaitu: hello.go dan reverse.go

// ketik pada terminal di tempat lab1/stringutil
go build // won't produce an output file
go install // will place the package inside the pkg direcory of the workspace

// Path (go install ) + (go install )
----
C:\Users\adpit\go\src\github.com\adpit\latihangolang\lab1\stringutil

// Path file hasil dari (go install )
----
C:\Users\adpit\go\pkg\windows_amd64\github.com\adpit\latihangolang\lab1

# import

// cara import sebuah package yang ada dalam GOROOT pada src
nama_skrip: lab1/helloworld/hello.go
skrip_ditulis_penjelasan_lengkapnya_dibuka_filenya:
	"fmt"
	"github.com/adpit/latihangolang/lab1/stringutil"

// dan kemudian kita gunakan satu fungsi public  "stringutil.Reverse"
nama_skrip: lab1/helloworld/hello.go
skrip_ditulis_penjelasan_lengkapnya_dibuka_filenya:
	fmt.Println(stringutil.Reverse("!oG ,olleH")) // go run hasilnya berhasil Hello, Go! (public fungsi)


# review
go build, builds go code; if code is package main, it creates a binary executable and drops it in the package main’s folder;
if code is just a package, it builds it then throws away the binary.

go install, builds and installs go code; if code is package main, it creates a binary executable and drops it in the workspace’s bin folder;
if code is a package, it builds it then drops it in the pkg folder (a file with a .a extension)

import, import path is everything after the “src” folder in your workspace use the last folder in the import path to reference the package
in your code you can alias packages in your imports

# tugas
Search for uuid at godoc.org
use go get to get the code for nu7hatch/gouuid
open up finder
locate this code
take a screenshot of this
Create a file that imports this code
alias the package as just uuid
take a screenshot of this

## materi ke 8-9, Documentation & Variadic
// resources, help, variadic, BNF, documentation

// resources
syllabus : An Introduction to Programming in Go
https://goo.gl/DE5QsL

// bootcamp video
https://www.golang-book.com/guides/bootcamp

// go by example
https://gobyexample.com
https://www.manning.com/books/go-in-action
https://github.com/ArdanStudios/gotraining

// pluralsight trainings
https://leanpub.com/howdoibuildawebappwithgo
https://www.gitbook.com/book/codegangsta/building-web-apps-with-go/details

// youtube todd mcleod playlists
https://www.youtube.com/user/toddmcleod/playlists?view=1&sort=dd

// Golang.org
https://golang.org/

// A Tour of Go
https://tour.golang.org/welcome/1

// Golang Newsletter
http://golangweekly.com

// Some other training I’ve yet to take
http://golangtutorials.blogspot.com/2011/05/table-of-contents.html

// Go Wiki
https://github.com/golang/go/wiki/CodeReviewComments#Receiver_Type

// learning golang from golang.org
http://golang.org/doc/
https://golang.org/doc/install (install aja)
https://golang.org/ref/spec (langue spec)
https://tour.golang.org/welcome/1 (done diatas)
https://golang.org/doc/code.html (cara menulis skrip go)
https://golang.org/doc/effective_go.html (now efektif go)
https://blog.golang.org/ (blog)

// go help (command line)

// go help [command]
go help env
